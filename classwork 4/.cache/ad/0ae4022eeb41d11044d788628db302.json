{"id":"App.svelte","dependencies":[{"name":"/Users/aliyaute/Desktop/classwork 4/package.json","includedInParent":true,"mtime":1574633161000},{"name":"svelte/internal","loc":{"line":21,"column":7},"parent":"/Users/aliyaute/Desktop/classwork 4/src/App.svelte","resolved":"/Users/aliyaute/Desktop/classwork 4/node_modules/svelte/internal/index.mjs"},{"name":"d3","loc":{"line":23,"column":20},"parent":"/Users/aliyaute/Desktop/classwork 4/src/App.svelte","resolved":"/Users/aliyaute/Desktop/classwork 4/node_modules/d3/index.js"},{"name":"svelte","loc":{"line":24,"column":24},"parent":"/Users/aliyaute/Desktop/classwork 4/src/App.svelte","resolved":"/Users/aliyaute/Desktop/classwork 4/node_modules/svelte/index.mjs"},{"name":"./high_schools.csv","loc":{"line":476,"column":57},"parent":"/Users/aliyaute/Desktop/classwork 4/src/App.svelte","resolved":"/Users/aliyaute/Desktop/classwork 4/src/high_schools.csv"},{"name":"_css_loader","parent":"/Users/aliyaute/Desktop/classwork 4/src/App.svelte","resolved":"/Users/aliyaute/Desktop/classwork 4/node_modules/parcel/src/builtins/css-loader.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _internal = require(\"svelte/internal\");\n\nvar d3 = _interopRequireWildcard(require(\"d3\"));\n\nvar _svelte = require(\"svelte\");\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\n/* App.svelte generated by Svelte v3.15.0 */\nconst file = \"App.svelte\";\n\nfunction add_css() {\n  var style = (0, _internal.element)(\"style\");\n  style.id = \"svelte-fm20lg-style\";\n  style.textContent = \"h1.svelte-fm20lg{font-size:4em;font-weight:100}@media(min-width: 640px){}\\n\";\n  (0, _internal.append_dev)(document.head, style);\n}\n\nfunction get_each_context(ctx, list, i) {\n  const child_ctx = Object.create(ctx);\n  child_ctx.school = list[i];\n  return child_ctx;\n} // (34:4) {#if currentSchool}\n\n\nfunction create_if_block_1(ctx) {\n  let p0;\n  let t1;\n  let h2;\n  let t2_value = ctx.currentSchool.school_name + \"\";\n  let t2;\n  let t3;\n  let p1;\n  let t4_value = ctx.currentSchool.primary_address_line_1 + \"\";\n  let t4;\n  let t5;\n  let p2;\n  let t6_value = ctx.currentSchool.phone_number + \"\";\n  let t6;\n  let t7;\n  let p3;\n  let t8_value = ctx.currentSchool.school_email + \"\";\n  let t8;\n  let dispose;\n  const block = {\n    c: function create() {\n      p0 = (0, _internal.element)(\"p\");\n      p0.textContent = \"Go back\";\n      t1 = (0, _internal.space)();\n      h2 = (0, _internal.element)(\"h2\");\n      t2 = (0, _internal.text)(t2_value);\n      t3 = (0, _internal.space)();\n      p1 = (0, _internal.element)(\"p\");\n      t4 = (0, _internal.text)(t4_value);\n      t5 = (0, _internal.space)();\n      p2 = (0, _internal.element)(\"p\");\n      t6 = (0, _internal.text)(t6_value);\n      t7 = (0, _internal.space)();\n      p3 = (0, _internal.element)(\"p\");\n      t8 = (0, _internal.text)(t8_value);\n      (0, _internal.add_location)(p0, file, 34, 8, 1164);\n      (0, _internal.add_location)(h2, file, 35, 8, 1225);\n      (0, _internal.add_location)(p1, file, 36, 8, 1272);\n      (0, _internal.add_location)(p2, file, 37, 8, 1328);\n      (0, _internal.add_location)(p3, file, 38, 8, 1374);\n      dispose = (0, _internal.listen_dev)(p0, \"click\", ctx.click_handler, false, false, false);\n    },\n    m: function mount(target, anchor) {\n      (0, _internal.insert_dev)(target, p0, anchor);\n      (0, _internal.insert_dev)(target, t1, anchor);\n      (0, _internal.insert_dev)(target, h2, anchor);\n      (0, _internal.append_dev)(h2, t2);\n      (0, _internal.insert_dev)(target, t3, anchor);\n      (0, _internal.insert_dev)(target, p1, anchor);\n      (0, _internal.append_dev)(p1, t4);\n      (0, _internal.insert_dev)(target, t5, anchor);\n      (0, _internal.insert_dev)(target, p2, anchor);\n      (0, _internal.append_dev)(p2, t6);\n      (0, _internal.insert_dev)(target, t7, anchor);\n      (0, _internal.insert_dev)(target, p3, anchor);\n      (0, _internal.append_dev)(p3, t8);\n    },\n    p: function update(changed, ctx) {\n      if (changed.currentSchool && t2_value !== (t2_value = ctx.currentSchool.school_name + \"\")) (0, _internal.set_data_dev)(t2, t2_value);\n      if (changed.currentSchool && t4_value !== (t4_value = ctx.currentSchool.primary_address_line_1 + \"\")) (0, _internal.set_data_dev)(t4, t4_value);\n      if (changed.currentSchool && t6_value !== (t6_value = ctx.currentSchool.phone_number + \"\")) (0, _internal.set_data_dev)(t6, t6_value);\n      if (changed.currentSchool && t8_value !== (t8_value = ctx.currentSchool.school_email + \"\")) (0, _internal.set_data_dev)(t8, t8_value);\n    },\n    d: function destroy(detaching) {\n      if (detaching) (0, _internal.detach_dev)(p0);\n      if (detaching) (0, _internal.detach_dev)(t1);\n      if (detaching) (0, _internal.detach_dev)(h2);\n      if (detaching) (0, _internal.detach_dev)(t3);\n      if (detaching) (0, _internal.detach_dev)(p1);\n      if (detaching) (0, _internal.detach_dev)(t5);\n      if (detaching) (0, _internal.detach_dev)(p2);\n      if (detaching) (0, _internal.detach_dev)(t7);\n      if (detaching) (0, _internal.detach_dev)(p3);\n      dispose();\n    }\n  };\n  (0, _internal.dispatch_dev)(\"SvelteRegisterBlock\", {\n    block,\n    id: create_if_block_1.name,\n    type: \"if\",\n    source: \"(34:4) {#if currentSchool}\",\n    ctx\n  });\n  return block;\n} // (41:4) {#if !currentSchool}\n\n\nfunction create_if_block(ctx) {\n  let p0;\n  let t0;\n  let input;\n  let t1;\n  let p1;\n  let t2;\n  let t3;\n  let t4;\n  let ul;\n  let dispose;\n  let each_value = ctx.filteredSchools;\n  let each_blocks = [];\n\n  for (let i = 0; i < each_value.length; i += 1) {\n    each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));\n  }\n\n  const block = {\n    c: function create() {\n      p0 = (0, _internal.element)(\"p\");\n      t0 = (0, _internal.text)(\"Filter: \\n            \");\n      input = (0, _internal.element)(\"input\");\n      t1 = (0, _internal.space)();\n      p1 = (0, _internal.element)(\"p\");\n      t2 = (0, _internal.text)(\"You are searching for \");\n      t3 = (0, _internal.text)(ctx.nameFilter);\n      t4 = (0, _internal.space)();\n      ul = (0, _internal.element)(\"ul\");\n\n      for (let i = 0; i < each_blocks.length; i += 1) {\n        each_blocks[i].c();\n      }\n\n      (0, _internal.attr_dev)(input, \"type\", \"text\");\n      (0, _internal.attr_dev)(input, \"placeholder\", \"School search\");\n      (0, _internal.add_location)(input, file, 42, 12, 1479);\n      (0, _internal.add_location)(p0, file, 41, 8, 1455);\n      (0, _internal.add_location)(p1, file, 44, 8, 1572);\n      (0, _internal.add_location)(ul, file, 45, 8, 1622);\n      dispose = (0, _internal.listen_dev)(input, \"input\", ctx.input_input_handler_1);\n    },\n    m: function mount(target, anchor) {\n      (0, _internal.insert_dev)(target, p0, anchor);\n      (0, _internal.append_dev)(p0, t0);\n      (0, _internal.append_dev)(p0, input);\n      (0, _internal.set_input_value)(input, ctx.nameFilter);\n      (0, _internal.insert_dev)(target, t1, anchor);\n      (0, _internal.insert_dev)(target, p1, anchor);\n      (0, _internal.append_dev)(p1, t2);\n      (0, _internal.append_dev)(p1, t3);\n      (0, _internal.insert_dev)(target, t4, anchor);\n      (0, _internal.insert_dev)(target, ul, anchor);\n\n      for (let i = 0; i < each_blocks.length; i += 1) {\n        each_blocks[i].m(ul, null);\n      }\n    },\n    p: function update(changed, ctx) {\n      if (changed.nameFilter && input.value !== ctx.nameFilter) {\n        (0, _internal.set_input_value)(input, ctx.nameFilter);\n      }\n\n      if (changed.nameFilter) (0, _internal.set_data_dev)(t3, ctx.nameFilter);\n\n      if (changed.pickSchool || changed.filteredSchools) {\n        each_value = ctx.filteredSchools;\n        let i;\n\n        for (i = 0; i < each_value.length; i += 1) {\n          const child_ctx = get_each_context(ctx, each_value, i);\n\n          if (each_blocks[i]) {\n            each_blocks[i].p(changed, child_ctx);\n          } else {\n            each_blocks[i] = create_each_block(child_ctx);\n            each_blocks[i].c();\n            each_blocks[i].m(ul, null);\n          }\n        }\n\n        for (; i < each_blocks.length; i += 1) {\n          each_blocks[i].d(1);\n        }\n\n        each_blocks.length = each_value.length;\n      }\n    },\n    d: function destroy(detaching) {\n      if (detaching) (0, _internal.detach_dev)(p0);\n      if (detaching) (0, _internal.detach_dev)(t1);\n      if (detaching) (0, _internal.detach_dev)(p1);\n      if (detaching) (0, _internal.detach_dev)(t4);\n      if (detaching) (0, _internal.detach_dev)(ul);\n      (0, _internal.destroy_each)(each_blocks, detaching);\n      dispose();\n    }\n  };\n  (0, _internal.dispatch_dev)(\"SvelteRegisterBlock\", {\n    block,\n    id: create_if_block.name,\n    type: \"if\",\n    source: \"(41:4) {#if !currentSchool}\",\n    ctx\n  });\n  return block;\n} // (47:8) {#each filteredSchools as school}\n\n\nfunction create_each_block(ctx) {\n  let li;\n  let a;\n  let t0_value = ctx.school.school_name + \"\";\n  let t0;\n  let t1;\n  let dispose;\n\n  function click_handler_1(...args) {\n    return ctx.click_handler_1(ctx, ...args);\n  }\n\n  const block = {\n    c: function create() {\n      li = (0, _internal.element)(\"li\");\n      a = (0, _internal.element)(\"a\");\n      t0 = (0, _internal.text)(t0_value);\n      t1 = (0, _internal.space)();\n      (0, _internal.attr_dev)(a, \"href\", \"#\");\n      (0, _internal.add_location)(a, file, 48, 16, 1702);\n      (0, _internal.add_location)(li, file, 47, 12, 1681);\n      dispose = (0, _internal.listen_dev)(a, \"click\", click_handler_1, false, false, false);\n    },\n    m: function mount(target, anchor) {\n      (0, _internal.insert_dev)(target, li, anchor);\n      (0, _internal.append_dev)(li, a);\n      (0, _internal.append_dev)(a, t0);\n      (0, _internal.append_dev)(li, t1);\n    },\n    p: function update(changed, new_ctx) {\n      ctx = new_ctx;\n      if (changed.filteredSchools && t0_value !== (t0_value = ctx.school.school_name + \"\")) (0, _internal.set_data_dev)(t0, t0_value);\n    },\n    d: function destroy(detaching) {\n      if (detaching) (0, _internal.detach_dev)(li);\n      dispose();\n    }\n  };\n  (0, _internal.dispatch_dev)(\"SvelteRegisterBlock\", {\n    block,\n    id: create_each_block.name,\n    type: \"each\",\n    source: \"(47:8) {#each filteredSchools as school}\",\n    ctx\n  });\n  return block;\n}\n\nfunction create_fragment(ctx) {\n  let div;\n  let p0;\n  let t0;\n  let t1;\n  let t2;\n  let t3;\n  let button;\n  let t5;\n  let h1;\n  let t9;\n  let p1;\n  let t10;\n  let t11;\n  let t12;\n  let t13;\n  let p2;\n  let t14;\n  let t15;\n  let t16;\n  let t17;\n  let p3;\n  let t18;\n  let input;\n  let t19;\n  let t20;\n  let dispose;\n  let if_block0 = ctx.currentSchool && create_if_block_1(ctx);\n  let if_block1 = !ctx.currentSchool && create_if_block(ctx);\n  const block = {\n    c: function create() {\n      div = (0, _internal.element)(\"div\");\n      p0 = (0, _internal.element)(\"p\");\n      t0 = (0, _internal.text)(\"The button has been clicked \");\n      t1 = (0, _internal.text)(ctx.counter);\n      t2 = (0, _internal.text)(\" times\");\n      t3 = (0, _internal.space)();\n      button = (0, _internal.element)(\"button\");\n      button.textContent = \"Click\";\n      t5 = (0, _internal.space)();\n      h1 = (0, _internal.element)(\"h1\");\n      h1.textContent = `This is an ${adjective} webapp`;\n      t9 = (0, _internal.space)();\n      p1 = (0, _internal.element)(\"p\");\n      t10 = (0, _internal.text)(\"There are \");\n      t11 = (0, _internal.text)(ctx.schoolCount);\n      t12 = (0, _internal.text)(\" schools in NYC\");\n      t13 = (0, _internal.space)();\n      p2 = (0, _internal.element)(\"p\");\n      t14 = (0, _internal.text)(\"There are \");\n      t15 = (0, _internal.text)(ctx.studentCount);\n      t16 = (0, _internal.text)(\" students in the entire system\");\n      t17 = (0, _internal.space)();\n      p3 = (0, _internal.element)(\"p\");\n      t18 = (0, _internal.text)(\"How many schools are there? \");\n      input = (0, _internal.element)(\"input\");\n      t19 = (0, _internal.space)();\n      if (if_block0) if_block0.c();\n      t20 = (0, _internal.space)();\n      if (if_block1) if_block1.c();\n      (0, _internal.add_location)(p0, file, 27, 4, 790);\n      (0, _internal.add_location)(button, file, 28, 4, 845);\n      (0, _internal.attr_dev)(h1, \"class\", \"svelte-fm20lg\");\n      (0, _internal.add_location)(h1, file, 29, 4, 893);\n      (0, _internal.add_location)(p1, file, 30, 4, 936);\n      (0, _internal.add_location)(p2, file, 31, 4, 986);\n      (0, _internal.attr_dev)(input, \"type\", \"text\");\n      (0, _internal.add_location)(input, file, 32, 35, 1083);\n      (0, _internal.add_location)(p3, file, 32, 4, 1052);\n      (0, _internal.add_location)(div, file, 26, 0, 780);\n      dispose = [(0, _internal.listen_dev)(button, \"click\", ctx.increment, false, false, false), (0, _internal.listen_dev)(input, \"input\", ctx.input_input_handler)];\n    },\n    l: function claim(nodes) {\n      throw new Error(\"options.hydrate only works if the component was compiled with the `hydratable: true` option\");\n    },\n    m: function mount(target, anchor) {\n      (0, _internal.insert_dev)(target, div, anchor);\n      (0, _internal.append_dev)(div, p0);\n      (0, _internal.append_dev)(p0, t0);\n      (0, _internal.append_dev)(p0, t1);\n      (0, _internal.append_dev)(p0, t2);\n      (0, _internal.append_dev)(div, t3);\n      (0, _internal.append_dev)(div, button);\n      (0, _internal.append_dev)(div, t5);\n      (0, _internal.append_dev)(div, h1);\n      (0, _internal.append_dev)(div, t9);\n      (0, _internal.append_dev)(div, p1);\n      (0, _internal.append_dev)(p1, t10);\n      (0, _internal.append_dev)(p1, t11);\n      (0, _internal.append_dev)(p1, t12);\n      (0, _internal.append_dev)(div, t13);\n      (0, _internal.append_dev)(div, p2);\n      (0, _internal.append_dev)(p2, t14);\n      (0, _internal.append_dev)(p2, t15);\n      (0, _internal.append_dev)(p2, t16);\n      (0, _internal.append_dev)(div, t17);\n      (0, _internal.append_dev)(div, p3);\n      (0, _internal.append_dev)(p3, t18);\n      (0, _internal.append_dev)(p3, input);\n      (0, _internal.set_input_value)(input, ctx.schoolCount);\n      (0, _internal.append_dev)(div, t19);\n      if (if_block0) if_block0.m(div, null);\n      (0, _internal.append_dev)(div, t20);\n      if (if_block1) if_block1.m(div, null);\n    },\n    p: function update(changed, ctx) {\n      if (changed.counter) (0, _internal.set_data_dev)(t1, ctx.counter);\n      if (changed.schoolCount) (0, _internal.set_data_dev)(t11, ctx.schoolCount);\n      if (changed.studentCount) (0, _internal.set_data_dev)(t15, ctx.studentCount);\n\n      if (changed.schoolCount && input.value !== ctx.schoolCount) {\n        (0, _internal.set_input_value)(input, ctx.schoolCount);\n      }\n\n      if (ctx.currentSchool) {\n        if (if_block0) {\n          if_block0.p(changed, ctx);\n        } else {\n          if_block0 = create_if_block_1(ctx);\n          if_block0.c();\n          if_block0.m(div, t20);\n        }\n      } else if (if_block0) {\n        if_block0.d(1);\n        if_block0 = null;\n      }\n\n      if (!ctx.currentSchool) {\n        if (if_block1) {\n          if_block1.p(changed, ctx);\n        } else {\n          if_block1 = create_if_block(ctx);\n          if_block1.c();\n          if_block1.m(div, null);\n        }\n      } else if (if_block1) {\n        if_block1.d(1);\n        if_block1 = null;\n      }\n    },\n    i: _internal.noop,\n    o: _internal.noop,\n    d: function destroy(detaching) {\n      if (detaching) (0, _internal.detach_dev)(div);\n      if (if_block0) if_block0.d();\n      if (if_block1) if_block1.d();\n      (0, _internal.run_all)(dispose);\n    }\n  };\n  (0, _internal.dispatch_dev)(\"SvelteRegisterBlock\", {\n    block,\n    id: create_fragment.name,\n    type: \"component\",\n    source: \"\",\n    ctx\n  });\n  return block;\n}\n\nlet adjective = \"super cool\";\n\nfunction instance($$self, $$props, $$invalidate) {\n  let schools = [];\n  let nameFilter = \"\";\n  let currentSchool = null;\n  let counter = 0;\n\n  function increment() {\n    $$invalidate(\"counter\", counter = counter + 1);\n  }\n\n  function pickSchool(school) {\n    console.log(\"You picked a school\");\n    $$invalidate(\"currentSchool\", currentSchool = school);\n  }\n\n  (0, _svelte.onMount)(async function () {\n    $$invalidate(\"schools\", schools = await d3.csv(require(\"./high_schools.csv\")));\n    console.log(schools);\n  });\n\n  function input_input_handler() {\n    schoolCount = this.value;\n    $$invalidate(\"schoolCount\", schoolCount), $$invalidate(\"schools\", schools);\n  }\n\n  const click_handler = () => $$invalidate(\"currentSchool\", currentSchool = null);\n\n  function input_input_handler_1() {\n    nameFilter = this.value;\n    $$invalidate(\"nameFilter\", nameFilter);\n  }\n\n  const click_handler_1 = ({\n    school\n  }) => pickSchool(school);\n\n  $$self.$capture_state = () => {\n    return {};\n  };\n\n  $$self.$inject_state = $$props => {\n    if (\"schools\" in $$props) $$invalidate(\"schools\", schools = $$props.schools);\n    if (\"adjective\" in $$props) $$invalidate(\"adjective\", adjective = $$props.adjective);\n    if (\"nameFilter\" in $$props) $$invalidate(\"nameFilter\", nameFilter = $$props.nameFilter);\n    if (\"currentSchool\" in $$props) $$invalidate(\"currentSchool\", currentSchool = $$props.currentSchool);\n    if (\"counter\" in $$props) $$invalidate(\"counter\", counter = $$props.counter);\n    if (\"filteredSchools\" in $$props) $$invalidate(\"filteredSchools\", filteredSchools = $$props.filteredSchools);\n    if (\"schoolCount\" in $$props) $$invalidate(\"schoolCount\", schoolCount = $$props.schoolCount);\n    if (\"studentCount\" in $$props) $$invalidate(\"studentCount\", studentCount = $$props.studentCount);\n  };\n\n  let filteredSchools;\n  let schoolCount;\n  let studentCount;\n\n  $$self.$$.update = (changed = {\n    schools: 1,\n    schoolCount: 1\n  }) => {\n    if (changed.schools) {\n      $: $$invalidate(\"filteredSchools\", filteredSchools = schools);\n    }\n\n    if (changed.schools) {\n      $: $$invalidate(\"schoolCount\", schoolCount = schools.length);\n    }\n\n    if (changed.schoolCount) {\n      $: $$invalidate(\"studentCount\", studentCount = schoolCount * 2000);\n    }\n  };\n\n  return {\n    nameFilter,\n    currentSchool,\n    counter,\n    increment,\n    pickSchool,\n    filteredSchools,\n    schoolCount,\n    studentCount,\n    input_input_handler,\n    click_handler,\n    input_input_handler_1,\n    click_handler_1\n  };\n}\n\nclass App extends _internal.SvelteComponentDev {\n  constructor(options) {\n    super(options);\n    if (!document.getElementById(\"svelte-fm20lg-style\")) add_css();\n    (0, _internal.init)(this, options, instance, create_fragment, _internal.safe_not_equal, {});\n    (0, _internal.dispatch_dev)(\"SvelteRegisterComponent\", {\n      component: this,\n      tagName: \"App\",\n      options,\n      id: create_fragment.name\n    });\n  }\n\n}\n\nvar _default = App;\nexports.default = _default;","css":"h1.svelte-fm20lg{font-size:4em;font-weight:100}@media(min-width: 640px){}"},"sourceMaps":{"js":{"mappings":[{"source":"App.svelte","name":null,"original":{"line":62,"column":4},"generated":{"line":18,"column":0}}],"sources":{"App.svelte":"<script>\n    import * as d3 from 'd3'\n    import { onMount } from 'svelte'\n    let schools = []\n    let adjective = \"super cool\"\n    let nameFilter = \"\"\n    // Update this when we update 'schools'\n    $: filteredSchools = schools\n    // Update this when we update 'schools'\n    $: schoolCount = schools.length\n    // \"You should update this variable if schoolCount changes\"\n    $: studentCount = schoolCount * 2000\n    let currentSchool = null\n    let counter = 0\n    function increment() {\n        counter = counter + 1\n    }\n    function pickSchool(school) {\n        console.log(\"You picked a school\")\n        currentSchool = school\n    }\n    onMount(async function() {\n        schools = await d3.csv(require(\"./high_schools.csv\"))\n        console.log(schools)\n    })\n</script>\n<div>\n    <p>The button has been clicked {counter} times</p>\n    <button on:click={increment}>Click</button>\n    <h1>This is an {adjective} webapp</h1>\n    <p>There are {schoolCount} schools in NYC</p>\n    <p>There are {studentCount} students in the entire system</p>\n    <p>How many schools are there? <input bind:value={schoolCount} type=\"text\"></p>\n    {#if currentSchool}\n        <p on:click={() => currentSchool = null}>Go back</p>\n        <h2>{ currentSchool.school_name }</h2>\n        <p>{ currentSchool.primary_address_line_1 }</p>\n        <p>{ currentSchool.phone_number }</p>\n        <p>{ currentSchool.school_email }</p>\n    {/if}\n    {#if !currentSchool}\n        <p>Filter: \n            <input type=\"text\" bind:value={nameFilter} placeholder=\"School search\">\n        </p>\n        <p>You are searching for {nameFilter}</p>\n        <ul>\n        {#each filteredSchools as school}\n            <li>\n                <a href=\"#\" on:click={() => pickSchool(school)}>{school.school_name}</a>\n            </li>\n        {/each}\n        </ul>\n    {/if}\n</div>\n<style>\n    main {\n        text-align: center;\n        padding: 1em;\n        max-width: 240px;\n        margin: 0 auto;\n    }\n    h1 {\n        font-size: 4em;\n        font-weight: 100;\n    }\n    @media (min-width: 640px) {\n        main {\n            max-width: none;\n        }\n    }\n</style>\n\n\n\n\n\n\n\n\n\n\n"},"lineCount":null}},"error":null,"hash":"fb06ed0dc3e4db5c9269e20326a8ef63","cacheData":{"env":{}}}