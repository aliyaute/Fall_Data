# Create a scene

Basic setup is

    var gamescene = {
      preload: preload,
      create: create,
      update: update
    }

    function preload () {

    }

    function create () {

    }

    function update () {

    }

    const config = {
        type: Phaser.AUTO,
        width: width,
        height: height,
        scene: [gamescene]
    }

    const game = new Phaser.Game(config)












# Add an image

preload:
  this.load.image('sky', 'assets/sky.png')

create:
  this.add.image(400, 300, 'sky')
...or maybe:
  this.add.image(0, 0, 'sky').setOrigin(0, 0)












# Physics


    physics: {
      default: 'arcade',
      arcade: {
        debug: true
      }
    },















# Physics bodies

create:
    platforms = this.physics.add.staticGroup()
    platforms.create(400, 568, 'platform').setScale(2).refreshBody()
    platforms.create(600, 400, 'platform')
    platforms.create(50, 250, 'platform')
    platforms.create(750, 220, 'platform')    

    player = this.physics.add.sprite(400, 350, 'star')











# Gravity

    gravity: { y: 300 },












# More physics

    player.setBounce(0.2)
    player.setCollideWorldBounds(true)

    this.physics.add.collider(player, platforms)








# Add some movement

create:

    cursors = this.input.keyboard.createCursorKeys()

update:

    if (cursors.left.isDown) {

    }

update:

  player.setVelocityX











# Particles

create:
    var particles = this.add.particles('red')

    var emitter = particles.createEmitter({
      speed: 100,
      scale: { start: 1, end: 0 },
      blendMode: 'ADD'
    })

    emitter.startFollow(player)
    // Probably need to setDepth depending on where
    // you put all thise














# Spritesheets

preload:
    this.load.spritesheet('character', 
        'assets/character.png',
        { frameWidth: 32, frameHeight: 48 }
    )


create:

    this.anims.create({
      key: 'face',
      frames: [ { key: 'character', frame: 4 } ],
      frameRate: 20
    })

    this.anims.create({
      key: 'left',
      frames: this.anims.generateFrameNumbers('character', { start: 0, end: 3 }),
      frameRate: 10,
      repeat: -1
    })

    this.anims.create({
      key: 'right',
      frames: this.anims.generateFrameNumbers('character', { start: 5, end: 8 }),
      frameRate: 10,
      repeat: -1
    })

update:
    player.anims.play('face', true)
















# Add some stars

create:

    stars = this.physics.add.group({
      key: 'star',
      repeat: 11,
      setXY: { x: 12, y: 0, stepX: 70 }
    })

    stars.children.iterate(function (child) {
      child.setBounceY(Phaser.Math.FloatBetween(0.4, 0.8))
    })

    // but make sure they land
    this.physics.add.collider(stars, platforms)














# Interaction

create:

    this.physics.add.overlap(player, stars, collectStar, null, this)

outside of everything:

    function collectStar (player, star) {
      star.disableBody(true, true)
    }











# Scoring

create:

    scoreText = this.add.text(16, 16, 'score: 0', { fontSize: '32px', fill: '#000' })

collectStar:

    score += 10
    scoreText.setText('Score: ' + score)








# Bombs

create:

    bombs = this.physics.add.group()
    this.physics.add.collider(bombs, platforms)
    this.physics.add.collider(player, bombs, hitBomb, null, this)

outside everything:

    function hitBomb (player, bomb)
    {
      this.physics.pause()
      player.setTint(0xff0000)
      // player.anims.play('turn')
      gameOver = true
    }

collectStar:

    if (stars.countActive(true) === 0) {
      stars.children.iterate(function (child) {
        child.enableBody(true, child.x, 0, true, true)
      })

      var x = (player.x < 400) ? Phaser.Math.Between(400, 800) : Phaser.Math.Between(0, 400)
      var bomb = bombs.create(x, 16, 'bomb')
      bomb.setBounce(1)
      bomb.setCollideWorldBounds(true)
      bomb.setVelocity(Phaser.Math.Between(-200, 200), 20)
      bomb.allowGravity = false
    }








# What now?

Docs:
https://medium.com/@michaelwesthadley/modular-game-worlds-in-phaser-3-tilemaps-1-958fc7e6bbd6
https://phaser.io/news/2018/03/gamefromscratch-phaser-3-video
https://phaser.io/tutorials/making-your-first-phaser-3-game
http://www.html5gamedevs.com/topic/35471-generic-platformer-es6-webpack-4-boilerplate/ (or use Parcel!)

Style:
https://github.com/nostalgic-css/NES.css (but test on mobile!)

Sprites and assets:
https://www.kenney.nl/assets
https://itch.io/game-assets/free
https://opengameart.org/
http://spritedatabase.net/
https://www.spriters-resource.com/